#!/bin/bash

# Script alternativo para configurar monitoreo autom√°tico en entornos Docker
# Usa un loop en background en lugar de cron

MONITOR_PID_FILE="/workspaces/OFITEC.AI/monitor.pid"
LOG_FILE="/workspaces/OFITEC.AI/monitoring_service.log"

echo "$(date): Configurando monitoreo autom√°tico alternativo" > $LOG_FILE

# Funci√≥n para verificar si el servicio ya est√° ejecut√°ndose
is_monitor_running() {
    if [ -f "$MONITOR_PID_FILE" ]; then
        local pid=$(cat "$MONITOR_PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0  # Est√° ejecut√°ndose
        else
            rm -f "$MONITOR_PID_FILE"  # Limpiar PID file obsoleto
            return 1  # No est√° ejecut√°ndose
        fi
    else
        return 1  # No hay PID file
    fi
}

# Funci√≥n para detener el monitoreo
stop_monitoring() {
    if is_monitor_running; then
        local pid=$(cat "$MONITOR_PID_FILE")
        echo "Deteniendo monitoreo autom√°tico (PID: $pid)..." >> $LOG_FILE
        kill "$pid" 2>/dev/null
        rm -f "$MONITOR_PID_FILE"
        echo "‚úÖ Monitoreo detenido" >> $LOG_FILE
    else
        echo "‚ÑπÔ∏è El monitoreo no est√° ejecut√°ndose" >> $LOG_FILE
    fi
}

# Funci√≥n para iniciar el monitoreo en background
start_monitoring() {
    if is_monitor_running; then
        echo "‚ÑπÔ∏è El monitoreo autom√°tico ya est√° ejecut√°ndose" >> $LOG_FILE
        return 0
    fi

    echo "Iniciando monitoreo autom√°tico en background..." >> $LOG_FILE

    # Script que se ejecuta en loop
    (
        while true; do
            echo "$(date): Ejecutando monitoreo autom√°tico..." >> $LOG_FILE
            cd /workspaces/OFITEC.AI
            ./monitor_system.sh >> $LOG_FILE 2>&1
            echo "$(date): Monitoreo completado, esperando 4 horas..." >> $LOG_FILE
            sleep 14400  # 4 horas = 14400 segundos
        done
    ) &

    local pid=$!
    echo $pid > "$MONITOR_PID_FILE"
    echo "‚úÖ Monitoreo autom√°tico iniciado (PID: $pid)" >> $LOG_FILE
    echo "   Se ejecutar√° cada 4 horas en background"
    echo "   Para detener: ./stop_monitoring.sh"
}

# Funci√≥n para verificar estado
status_monitoring() {
    if is_monitor_running; then
        local pid=$(cat "$MONITOR_PID_FILE")
        echo "‚úÖ Monitoreo autom√°tico activo (PID: $pid)"
        echo "   √öltima ejecuci√≥n: $(date -r $LOG_FILE 2>/dev/null || echo 'Desconocida')"
    else
        echo "‚ùå Monitoreo autom√°tico inactivo"
    fi
}

# Procesar argumentos
case "${1:-start}" in
    "start")
        start_monitoring
        ;;
    "stop")
        stop_monitoring
        ;;
    "status")
        status_monitoring
        ;;
    "restart")
        stop_monitoring
        sleep 2
        start_monitoring
        ;;
    *)
        echo "Uso: $0 {start|stop|status|restart}"
        echo "  start  - Iniciar monitoreo autom√°tico"
        echo "  stop   - Detener monitoreo autom√°tico"
        echo "  status - Ver estado del monitoreo"
        echo "  restart- Reiniciar monitoreo autom√°tico"
        exit 1
        ;;
esac

# Mostrar informaci√≥n final
echo ""
echo "üìä Informaci√≥n del servicio:"
echo "   - Log del servicio: $LOG_FILE"
echo "   - Archivo PID: $MONITOR_PID_FILE"
echo "   - Para ver logs en tiempo real: tail -f $LOG_FILE"
echo "   - Para detener: $0 stop"

# Ejecutar una prueba inicial si se est√° iniciando
if [ "${1:-start}" = "start" ]; then
    echo ""
    echo "Ejecutando prueba inicial..."
    cd /workspaces/OFITEC.AI
    ./monitor_system.sh
fi
